---
title: "ST558 - Project 2 - Shiny App - Kyra Kapsaskis"
author: "Kyra Kapsaskis"
format: html
editor: visual
---

```{r}
library(httr)
library(jsonlite)
library(tidyr)
library(shinydashboard)
library(DT)
library(shiny)
library(caret)
library(dplyr)
library(ggplot2)
library(lubridate)
```



```{r}

# Querying the API - including 6 parameters

sunrise_sunset_query <- function(latitude, longitude, date, tzid, callback=NULL, format=1){

# using the unchanging part of the url as the base
  base_URL <- "https://api.sunrise-sunset.org/json"
  
# to create 'url' object we need to combine all the parts 
  
  url <- paste0(base_URL,
                
        # in decimal degrees  
        
                "?lat=", latitude,
        
        # in decimal degrees
        
                "&lng=", longitude,
        
        # Date in YYYY-MM-DD format
        
                "&date=", date,
        
        # Specified Time Zone that you can find here         
        # https://www.php.net/manual/en/timezones.php
        
                "&tzid=", tzid,
        
        # 0 or 1, 1 is default, for the standard of time (ISO 8601)
        
                "&formatted=", format)
  
        # CALLBACK - Optional. Any valid JavaScript method name can be used as the callback value.  
        # The complete JSON API response will be wrapped in the callback function requested.
  
               # "&callback=", callback)

  if (!is.null(callback)) {
      url <- paste0(url, "&callback=", callback)
  }
  
  
# creating an object for the response to the API call
  response <- GET(url)
  
# Checking for a successful request
  if (http_status(response)$category != "Success") {
    stop("API request failed")
  }  

# Parsing the response content from JSON
  content_text <- content(response, "text", encoding = "UTF-8")
  parsed <- fromJSON(content_text)
  
# Checking the structure of the parsed data
  str(parsed, max.level = 1)
  
# creating a tibble
  my_requested_data <- as_tibble(parsed$results)
  
  return(my_requested_data)
}


```

```{r}
# testing out the querying function

sunrise_sunset_query(35.913200, -79.055847, 2024-07-07, "America/New_York")
```
```{r}

chapel_hill_data <- sunrise_sunset_query(35.913200, -79.055847, 2024-07-07, "America/New_York")
```

```{r}
chapel_hill_data
```

------------------------------------------------------------------------


```{r}
StartDate<-"2024-01-01"
EndDate<- "2024-12-31"
dates <- seq(ymd(StartDate), ymd(EndDate), by = "days")

print(head(dates))
```


```{r}
capital_cities <- read.csv("https://gist.githubusercontent.com/ofou/df09a6834a8421b4f376c875194915c9/raw/355eb56e164ddc3cd1a9467c524422cb674e71a9/country-capital-lat-long-population.csv")
```


```{r}
capital_cities 
```



```{r}
chapel_hill_plot <- ggplot(chapel_hill_data, aes(sunset, sunrise)) + geom_point()
```

```{r}
chapel_hill_plot
```


# Shiny App

```{r}
shinyUI(fluidPage(
  
  # Application title
  uiOutput("Finding the time of Sunrise and Sunset"),
  
  # Sidebar with options for the data set
  sidebarLayout(
    sidebarPanel(
      h3("Select the mammal's biological order:"),
      selectizeInput("vore", "Vore", selected = "omni", choices = levels(as.factor(msleep$vore))),
      br(),
      sliderInput("size", "Size of Points on Graph",
                  min = 1, max = 10, value = 5, step = 1),
      checkboxInput("conservation", h4("Color Code Conservation Status", style = "color:red;")),
      conditionalPanel("input.conservation", checkboxInput("alpha", h5("Also change symbol based on REM sleep?")))
    ),
    
    # Show outputs
    mainPanel(
      plotOutput("sleepPlot"),
      textOutput("info"),
      tableOutput("table")
      )
  )
))
```

```{r}
# Run the Shiny app
shinyApp(ui, server)
```
