---
title: "ST558 - Project 2 - Shiny App - Kyra Kapsaskis"
author: "Kyra Kapsaskis"
format: html
editor: visual
---

```{r}
# my packages

library(httr)
library(jsonlite)
library(tidyr)
library(shinydashboard)
library(DT)
library(shiny)
library(caret)
library(dplyr)
library(ggplot2)
library(lubridate)

```


```{r}

# Querying the API - including 6 parameters

sunrise_sunset_query <- function(latitude, longitude, date, tzid, callback=NULL, format=1){

# using the unchanging part of the url as the base
  base_URL <- "https://api.sunrise-sunset.org/json"
  
# to create 'url' object we need to combine all the parts 
  
  url <- paste0(base_URL,
                
        # in decimal degrees  
        
                "?lat=", latitude,
        
        # in decimal degrees
        
                "&lng=", longitude,
        
        # Date in YYYY-MM-DD format
        
                "&date=", date,
        
        # Specified Time Zone that you can find here         
        # https://www.php.net/manual/en/timezones.php
        
                "&tzid=", tzid,
        
        # 0 or 1, 1 is default, for the standard of time (ISO 8601)
        
                "&formatted=", format)
  
        # CALLBACK - Optional. Any valid JavaScript method name can be used as the callback value.  
        # The complete JSON API response will be wrapped in the callback function requested.
  
               # "&callback=", callback)

  # if (!is.null(callback)) {
  #     url <- paste0(url, "&callback=", callback)
  # }
  
# creating an object for the response to the API call
  response <- GET(url)
  

# Parsing the response content from JSON
  content_text <- content(response, "text", encoding = "UTF-8")
  parsed <- fromJSON(content_text)
  
# Checking the structure of the parsed data
  str(parsed)
  
# creating a tibble
  my_requested_data <- as_tibble(parsed$results)
  
  return(my_requested_data)
}


```

------------------------------------------------------------------------

```{r}
# READING IN THIS RANDOM DATA FROM THE INTERNET THAT HAS SOME USEFUL INFO FOR MY PURPOSES
# LIST OF EACH CAPITAL CITY IN THE WORLD AND THEIR LATITUDE AND LONGITUDE

capital_cities <- read.csv("https://gist.githubusercontent.com/ofou/df09a6834a8421b4f376c875194915c9/raw/355eb56e164ddc3cd1a9467c524422cb674e71a9/country-capital-lat-long-population.csv")
```


```{r}
# COMMENTING THIS OUT BECAUSE I WAS TRYING TO QUERY THE FIRST DAY OF EACH MONTH BUT IT WAS TAKING WAY WAYYY TOO LONG TO RUN. TOO MANY OBSERVATIONS.

# StartDate <- as.Date("2024-01-01")
# EndDate <- as.Date("2024-12-31")
# dates <- seq(StartDate, EndDate, by = "months")
# formatted_dates <- format(dates, "%Y-%m-%d")

# SO I CHANGED IT TO JUST ONE DAY SO THAT I CAN ACTUALLY GET SOME DATA

day_of_choice <- as.Date("2024-01-01")
```

```{r}
# CREATING AN EMPTY LIST? tibble? experimented with each. 

result_list <- tibble()
```

```{r}
# THIS PRODUCES A LIST OF TIBBLES FOR EACH CITY (FROM THE API DATA) BUT DOESN'T INCLUDE THE CITY NAME AND LAT/LON THAT WAS USED TO GET THE DATA INSIDE THE TIBBLES

for (i in 1:nrow(capital_cities)) {
    lat <- capital_cities$Latitude[i]
    lon <- capital_cities$Longitude[i]
    date <- day_of_choice
    result <- sunrise_sunset_query(lat, lon, date, "America/New_York")
  
    #result$City <- capital_cities$City[i]
    #result$Date <- date

    result_list <- append(result_list, list(result))
  }

```


```{r}

# MY OLD METHOD OF ITERATING OVER THE DATES AND CITIES - TOO MUCH DATA - REWROTE THIS ABOVE

# for (i in 1:nrow(capital_cities)) {
#   for (j in 1:length(formatted_dates)) {
#     lat <- capital_cities$Latitude[i]
#     lon <- capital_cities$Longitude[i]
#     date <- formatted_dates[j]
#     result <- sunrise_sunset_query(lat, lon, date, "America/New_York")
#     # Add city and date information to result
#     result$City <- capital_cities$City[i]
#     result$Date <- date
#     
#    # Append result to the list
#     result_list <- append(result_list, list(result))
#   }
# }
```

```{r}
# adding an id column to the result_list

# result_list <- as.data.frame(result_list)

# id <- list(1:363)

# result_list <- result_list |>
#                  mutate(id = if_else(result_list$names = i in 1:363), "1", "NA"),
#                    .before=type)
```


```{r}
# Combine the list of tibbles into one larger dataframe
combined_results <- bind_rows(result_list)
```


```{r}
# NOW ADD THE CITY NAMES? 
combined_cities_data <- bind_rows(combined_results, capital_cities)
```

```{r}
print(combined_cities_data)
```

```{r}
# ATTEMPTING TO ELIMINATE THE NA VALUES? HOW DO I DO THIS

# nope, this removes all the data

# dropped_and_combined <- drop_na(combined_cities_data)
```


```{r}
#OK SO WHY AM I GETTING SO MANY ROWS PER CITY

 my_subset <- cross_join(capital_cities, combined_results)

# cross join and full join both don't work? 

# my_subset <- full_join(capital_cities, combined_results)
```

```{r}
print(my_subset)
```
```{r}
# Identify duplicates based on all columns
# duplicates <- your_data[duplicated(your_data), ]

# View the duplicates
# print(duplicates)
```



```{r}
#help("group_by")
```


```{r}
# my_final_subset <- group_by(my_subset, Capital.City, Country, Latitude, Longitude, Population, Capital.Type)
```












```{r}
# Run the Shiny app
shinyApp(ui, server)
```
